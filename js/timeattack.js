// Generated by CoffeeScript 1.7.1
(function() {
  var TimeAttackGamemode,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TimeAttackGamemode = (function(_super) {
    __extends(TimeAttackGamemode, _super);

    function TimeAttackGamemode() {
      this.steps = 0;
      this.startTime = new Date().getTime() / 1000;
      this.timeLimit = 15;
      this.endTime = this.startTime + this.timeLimit;
      game.isPlaying = true;
    }

    TimeAttackGamemode.prototype.render = function(game) {
      var scoreString, timeNow, timeString;
      timeNow = new Date().getTime() / 1000;
      if (game.isPlaying === true) {
        game.font.renderString(game, "SCORE " + this.steps, 20, game.height - 40, 2);
        timeString = (this.endTime - timeNow).toFixed(3).toString();
        game.font.renderString(game, "TIME", (game.width - 20) - game.font.getTextWidth("TIME", 1), game.height - 55, 1);
        game.font.renderString(game, timeString, (game.width - 20) - game.font.getTextWidth(timeString, 2), game.height - 40, 2);
      } else {
        game.gameContext.fillStyle = "rgba(192, 57, 43, 0.8)";
        game.gameContext.fillRect(0, 0, game.width, game.height);
        game.renderGameOver((game.width / 2) - (109 * 3) / 2, game.height / 2 - 30);
        game.renderPressAnyKey(game.width / 2 - 118., 500);
        scoreString = "SCORE " + this.steps;
        game.font.renderStringCenter(game, scoreString, game.width / 2, 550, 3);
      }
      if (this.endTime < timeNow) {
        game.isPlaying = false;
      }
      game.renderLogo(20, 20);
    };

    TimeAttackGamemode.prototype.onHit = function(game, tileIndex) {
      return this.steps += 1;
    };

    TimeAttackGamemode.prototype.onFail = function(game, tileIndex) {
      return game.isPlaying = false;
    };

    TimeAttackGamemode.prototype.onKeyDown = function(game, e) {
      if (!game.isPlaying) {
        game.gamemode = new TimeAttackGamemode();
        game.regenerateTiles();
        game.isPlaying = true;
        return false;
      }
      return game.isPlaying;
    };

    return TimeAttackGamemode;

  })(WhiteTileGamemode);

}).call(this);
