// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

  window.gamelib = {};

  window.whitetile = {
    "gamemodes": {}
  };

  window.gamelib.BaseGame = (function() {
    function BaseGame() {
      this.render = __bind(this.render, this);
    }

    BaseGame.prototype.setup = function() {
      this.loadCanvas(this.canvasSelector);
      this.hookKeyboard();
    };

    BaseGame.prototype.start = function() {
      requestAnimationFrame((function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    };

    BaseGame.prototype.loadCanvas = function(canvasSelector) {
      this.gameCanvas = $(canvasSelector)[0];
      this.gameContext = this.gameCanvas.getContext("2d");
      this.gameContext.imageSmoothingEnabled = false;
      this.gameContext.webkitImageSmoothingEnabled = false;
      this.gameContext.mozImageSmoothingEnabled = false;
    };

    BaseGame.prototype.hookKeyboard = function() {
      window.addEventListener("keydown", ((function(_this) {
        return function(e) {
          return _this.keyDown(e);
        };
      })(this)));
    };

    BaseGame.prototype.renderResource = function(sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
      this.gameContext.drawImage(this.resourceImage, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    };


    /*
    	The following methods are to be implemented
    	by classes inheriting BaseGame
     */

    BaseGame.prototype.render = function() {};

    BaseGame.prototype.keyDown = function(e) {};

    return BaseGame;

  })();

  window.gamelib.BitmapFont = (function() {
    function BitmapFont(characterList, charWidth, charHeight, startX, startY) {
      this.characterList = characterList;
      this.charWidth = charWidth;
      this.charHeight = charHeight;
      this.startX = startX;
      this.startY = startY;
    }

    BitmapFont.prototype.getTextWidth = function(text, scale) {
      return text.length * (this.charWidth * scale);
    };

    BitmapFont.prototype.getTextHeight = function(text, scale) {
      return this.charHeight * scale;
    };

    BitmapFont.prototype.renderCharacter = function(game, character, x, y, scale) {
      var charIndex;
      if (__indexOf.call(this.characterList, character) < 0) {
        return;
      }
      charIndex = this.characterList.indexOf(character);
      game.renderResource(this.startX + charIndex * this.charWidth, this.startY, this.charWidth, this.charHeight, x, y, this.charWidth * scale, this.charHeight * scale);
    };

    BitmapFont.prototype.renderString = function(game, text, x, y, scale) {
      var currentX, _i, _ref;
      for (currentX = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; currentX = 0 <= _ref ? ++_i : --_i) {
        this.renderCharacter(game, text[currentX], x + ((this.charWidth * scale) * currentX), y, scale);
      }
    };

    BitmapFont.prototype.renderStringRight = function(game, text, x, y, scale) {
      this.renderString(game, text, x - this.getTextWidth(text, scale), y, scale);
    };

    BitmapFont.prototype.renderStringCenter = function(game, text, x, y, scale) {
      this.renderString(game, text, x - (this.getTextWidth(text, scale) / 2), y, scale);
    };

    return BitmapFont;

  })();

  window.gamelib.Texture = (function() {
    function Texture(startX, startY, width, height) {
      this.startX = startX;
      this.startY = startY;
      this.width = width;
      this.height = height;
    }

    Texture.prototype.render = function(game, x, y, scale) {
      return game.renderResource(this.startX, this.startY, this.getWidth(), this.getHeight(), x, y, this.getWidth() * scale, this.getHeight() * scale);
    };

    Texture.prototype.renderRight = function(game, x, y, scale) {
      this.render(game, x - (this.getWidth() * scale), y, scale);
    };

    Texture.prototype.renderCenter = function(game, x, y, scale) {
      this.render(game, x - (this.getWidth() * scale / 2), y, scale);
    };

    Texture.prototype.getWidth = function() {
      return this.width;
    };

    Texture.prototype.getHeight = function() {
      return this.height;
    };

    return Texture;

  })();

}).call(this);
