// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.whitetile.gamemodes.TimeAttackGamemode = (function(_super) {
    __extends(TimeAttackGamemode, _super);

    function TimeAttackGamemode() {
      return TimeAttackGamemode.__super__.constructor.apply(this, arguments);
    }

    TimeAttackGamemode.prototype.renderGameOver = function(game) {
      TimeAttackGamemode.__super__.renderGameOver.call(this, game);
      game.font.renderStringCenter(game, "SCORE " + this.steps, game.width / 2, game.height / 2, 3);
    };

    TimeAttackGamemode.prototype.renderOverlay = function(game) {
      var captionY, leftX, rightX, timeNow, valueY, xOffset;
      timeNow = new Date().getTime() / 1000;
      xOffset = 20;
      leftX = xOffset;
      rightX = game.width - xOffset;
      captionY = game.height - 55;
      game.font.renderString(game, "SCORE", leftX, captionY, 1);
      game.font.renderStringRight(game, "TIME", rightX, captionY, 1);
      valueY = game.height - 35;
      game.font.renderString(game, this.steps.toString(), leftX, valueY, 2);
      game.font.renderStringRight(game, (this.endTime - timeNow).toFixed(3).toString(), rightX, valueY, 2);
      if (this.endTime < timeNow) {
        this.isPlaying = false;
      }
    };

    TimeAttackGamemode.prototype.onHit = function(game, tileIndex) {
      return this.steps += 1;
    };

    TimeAttackGamemode.prototype.onFail = function(game, tileIndex) {
      return this.isPlaying = false;
    };

    TimeAttackGamemode.prototype.reset = function(game) {
      this.steps = 0;
      this.startTime = new Date().getTime() / 1000;
      this.timeLimit = 15;
      this.endTime = this.startTime + this.timeLimit;
      return TimeAttackGamemode.__super__.reset.call(this, game);
    };

    TimeAttackGamemode.prototype.onKeyDown = function(game, e) {
      if (e.keyCode === 13) {
        this.reset(game);
        return false;
      }
      return this.isPlaying;
    };

    return TimeAttackGamemode;

  })(window.whitetile.gamemodes.WhiteTileGamemode);

}).call(this);
